// server/config/config.js
const mysql = require("mysql");

const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "27102002",
    database: "login3",
});

db.connect(error => {
    if (error) throw error;
    console.log("Successfully connected to the database.");
});

module.exports = db;
---------------------
// server/controllers/login.controller.js
const User = require("../models/login.model");

exports.signup = (req, res) => {
  User.createUser(req.body.name, req.body.email, req.body.password, (err, data) => {
    if (err) {
      return res.json("Error");
    }
    return res.json(data);
  });
};

exports.login = (req, res) => {
  User.findUserByEmailAndPassword(req.body.email, req.body.password, (err, data) => {
    if (err) {
      return res.json("Error");
    }
    if (data.length > 0) {
      return res.json("Success");
    } else {
      return res.json("Fail");
    }
  });
};
---------------------
// server/controllers/student.controller.js
const Student = require("../models/student.model");

exports.getAllStudents = (req, res) => {
    Student.getAll((err, data) => {
        if (err) res.status(500).send({ message: err.message || "Some error occurred while retrieving students." });
        else res.send(data);
    });
};

exports.createStudent = (req, res) => {
    const student = new Student({
        name: req.body.name,
        email: req.body.email,
        classname: req.body.classname
    });

    Student.create(student, (err, data) => {
        if (err) res.status(500).send({ message: err.message || "Some error occurred while creating the Student." });
        else res.send(data);
    });
};

exports.updateStudent = (req, res) => {
    const id_student = req.params.id;

    Student.updateById(id_student, new Student(req.body), (err, data) => {
        if (err) {
            if (err.kind === "not_found") res.status(404).send({ message: `Not found Student with id_student ${id_student}.` });
            else res.status(500).send({ message: "Error updating Student with id_student " + id_student });
        } else res.send(data);
    });
};

exports.deleteStudent = (req, res) => {
    const id_student = req.params.id;

    Student.remove(id_student, (err, data) => {
        if (err) {
            if (err.kind === "not_found") res.status(404).send({ message: `Not found Student with id_student ${id_student}.` });
            else res.status(500).send({ message: "Could not delete Student with id_student " + id_student });
        } else res.send({ message: `Student was deleted successfully!` });
    });
};

module.exports = exports;
---------------------
// server/models/User.js
const db = require("../config/config");

class User {
  static createUser(name, email, password, callback) {
    const sqlInsert = "INSERT INTO user (name, email, password) VALUES (?)";
    const values = [name, email, password];
    db.query(sqlInsert, [values], callback);
  }

  static findUserByEmailAndPassword(email, password, callback) {
    const sql = "SELECT * FROM user WHERE email = ? AND password = ?";
    db.query(sql, [email, password], callback);
  }
}

module.exports = User;
---------------------
// server/models/student.model.js
const sql = require("../config/config.js");

const Student = function(student) {
    this.name = student.name;
    this.email = student.email;
    this.classname = student.classname;
};

Student.getAll = result => {
    sql.query("SELECT * FROM student", (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(null, err);
            return;
        }

        console.log("students: ", res);
        result(null, res);
    });
};

Student.create = (newStudent, result) => {
    sql.query("INSERT INTO student SET ?", newStudent, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(err, null);
            return;
        }

        console.log("created student: ", { id_student: res.insertId, ...newStudent });
        result(null, { id_student: res.insertId, ...newStudent });
    });
};

Student.updateById = (id_student, student, result) => {
    sql.query(
        "UPDATE student SET name = ?, email = ?, classname = ? WHERE id_student = ?",
        [student.name, student.email, student.classname, id_student],
        (err, res) => {
            if (err) {
                console.log("error: ", err);
                result(null, err);
                return;
            }

            if (res.affectedRows == 0) {
                result({ kind: "not_found" }, null);
                return;
            }
            console.log("updated student: ", { id_student: id_student, ...student });
            result(null, { id_student: id_student, ...student });
        }
    );
};

Student.remove = (id_student, result) => {
    sql.query("DELETE FROM student WHERE id_student = ?", id_student, (err, res) => {
        if (err) {
            console.log("error: ", err);
            result(null, err);
            return;
        }

        if (res.affectedRows == 0) {
            result({ kind: "not_found" }, null);
            return;
        }

        console.log("deleted student with id_student: ", id_student);
        result(null, res);
    });
};

module.exports = Student;

---------------------
const express = require("express");
const router = express.Router();
const userController = require("../controllers/login.controller");

router.post("/signup", userController.signup);
router.post("/login", userController.login);

module.exports = router;
---------------------
// server/routes/student.routes.js
const express = require("express");
const studentController = require("../controllers/student.controller");

const router = express.Router();

router.get("/", studentController.getAllStudents);
router.post("/create", studentController.createStudent);
router.put("/update/:id", studentController.updateStudent);
router.delete("/:id", studentController.deleteStudent);

module.exports = router;
---------------------
// server/express.js
const express = require("express");
const cors = require("cors");

const studentRoutes = require("./routes/student.routes");
const loginRoutes = require("./routes/login.routes");

const app = express();

app.use(cors());
app.use(express.json());

app.use("/api", studentRoutes);
app.use("/api", loginRoutes);

module.exports = app;

---------------------
// server/server.js
const app = require("./express");
const port = 8082;

app.get("/", (req, res) => {
    res.json("Hello World!");
}); 

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
---------------------
-- Tạo cơ sở dữ liệu
CREATE DATABASE IF NOT EXISTS login3;
-- Sử dụng cơ sở dữ liệu
USE login3;
-- Tạo bảng user
CREATE TABLE IF NOT EXISTS user (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(255),
    password VARCHAR(50)
);
 
-- Tạo bảng studentstudent
CREATE TABLE IF NOT EXISTS student (
    ID_student INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    classname VARCHAR(50),
    ID INT,
    FOREIGN KEY (ID) REFERENCES user(ID)
);
INSERT INTO user (name, email, password) VALUES
('Nguyen Van A', 'nguyen.a@example.com', 'password123'),
('Tran Thi B', 'tran.b@example.com', 'pass456'),
('Le Van C', 'le.c@example.com', 'abc@123');

INSERT INTO student (name, email, classname, ID) VALUES
('Pham Van X', 'pham.x@example.com', 'Class A', 1),
('Nguyen Thi Y', 'nguyen.y@example.com', 'Class B', 2),
('Tran Van Z', 'tran.z@example.com', 'Class C', 3);
---------------------
